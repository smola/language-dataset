// CustomDialogGui 
// global vars
CustomDialogGui CDG;
int CDG_active_options[];
int CDG_active_options_height[];
int CDG_active_options_width[];
String CDG_active_options_text[];
bool in_speech;


/***********************************************************************
 * PUBLIC FUNCTION
 * init()
 * Set and modify your default GUI options here
 *
 ***********************************************************************/
function CustomDialogGui::init() {
  
  // Activate this to hide the action GUI while a dialog is active.
  this.hide_gui_while_dialog = false;  
  
  // Top-Left corner of the Dialog GUI
  this.gui_xpos        = 0;
  this.gui_ypos        = 144;
  
  //Size of the whole Dialog GUI
  this.gui_width       = 320;
  this.gui_height      = 56;
  
  // xyscreeenborders define the closest distance to the screen.
  // This overrides gui_xpos and ypos.
  this.yscreenborder      = 0;
  this.xscreenborder      = 0;   

  // The font
  this.text_font        = eFontText;
  this.text_alignment   = eAlignLeft;
  this.text_color       = 15219;
  this.text_color_active = 38555;
  
  // optional background Image for the Text
  this.text_bg           = 0;
  this.text_bg_xpos      = 0;
  this.text_bg_scaling   = 0;
  this.text_bg_transparency = 0;
  this.text_line_space   = 2;
  this.text_numbering    = true; 
 
  // How many rows are to be scrolled per click
  this.scroll_rows = 1;
  
  // optional bullet image, 0 = off
  this.bullet = 0;
  
  // scrolling with mousewheel
  this.mousewheel      = true;
  
  // Always begins the dialog with the first option available
  this.reset_scrollstate = true;
  
  // First option on the bottom, last option on top
  this.dialog_options_upwards = false;
  
  // Image Number and GUI-coordinates for the Up-Arrow image
  // Highlight images are optional and only work properly in AGS >=3.4
  this.uparrow_img      = 124;
  this.uparrow_hi_img   = 137; 
  this.uparrow_xpos     = 303; 
  this.uparrow_ypos     = 1;
  
  //Image Number and XY-Coordinates for the Down-Arrow image
  this.downarrow_img      = 128;
  this.downarrow_hi_img   = 141; 
  this.downarrow_xpos     = 303;
  this.downarrow_ypos     = 43;
  
  // Amount of time, after scrolling is being processed
  // use this if you have push-images for scrolling arrows
  this.scroll_btn_delay = 0.5;
  
  // Autoalign arrows so you don't need to supply XY-coordinates 
  // highly recommended in combination with autoheight and autowidth
  // 0 = off, 1 = left, 2= center, 3=right
  this.auto_arrow_align = 3; 
  // Define the offset between the arrow sprite and the GUI edge. This value
  // is not affected by the borders, so you have to make sure that the offset
  // is not greater than the border size.
  this.auto_arrow_up_offset_x = 1;
  this.auto_arrow_up_offset_y = 1;
  this.auto_arrow_down_offset_x = 1;
  this.auto_arrow_down_offset_y = 1;  

  // borders - also needed for the scroll buttons
  this.border_top      = 5;
  this.border_bottom   = 5;
  this.border_left     = 13;
  this.border_right    = 17;
  this.border_visible  = false;
  this.border_color    = 4;
  
  // Background
  // set bg_img_transparency to -1 if you're using 32-bit graphics and
  // want to preserve the alpha channel  
  this.bg_img                = 0;
  this.bg_img_scaling        = 0;
  this.bg_img_transparency   = 0;
  this.bg_color              = 0;
  
  // optional autosize, overrides your width and height setting
  // also overrides the position of your scrolling - arrows
  this.autosize_height       = false; 
  this.autosize_width        = false;
  this.autosize_minheight    = 20; 
  this.autosize_maxheight    = 150; 
  this.autosize_minwidth     = 60;
  this.autosize_maxwidth     = 200; 
  // Options end 
}


/***********************************************************************
 * PRIVATE FUNCTION
 * prepare(DialogOptionsRenderingInfo)
 * Sets some global vars
 * 
 ***********************************************************************/
function _prepare(this CustomDialogGui*, DialogOptionsRenderingInfo *info)
{
  int i = 1;
  CDG.active_options_count = 1;
  in_speech = true;
  
  if (this.hide_gui_while_dialog == true && gMaingui.Visible == true && gAction.Visible == true) {
    gMaingui.Visible = false;
    gAction.Visible = false;
  }
  
  // count active options
  while (i <= info.DialogToRender.OptionCount) {
    if (info.DialogToRender.GetOptionState(i) == eOptionOn) CDG.active_options_count++;
    i++;
  }
  // prepare dynamic arrays
  CDG_active_options        = new int[CDG.active_options_count];
  CDG_active_options_height = new int[CDG.active_options_count];
  CDG_active_options_width  = new int[CDG.active_options_count];
  CDG_active_options_text   = new String[CDG.active_options_count];
}

/***********************************************************************
 * PRIVATE FUNCTION
 * _addOption(DialogOptionsRenderingInfo *info)
 * sets Dialog options up.
 * 
 ***********************************************************************/
function _addOption(this CustomDialogGui*, int position, int optionNumber, String optionText)
{
  String temp_option;
  int temp_text_height;
  CDG_active_options[position] = optionNumber;
  
  if (CDG.text_numbering) {
    if (CDG.dialog_options_upwards) temp_option = String.Format ("%d.",CDG.active_options_count-position);
    else temp_option = String.Format ("%d.",position);
    temp_option = temp_option.Append(" ");
    temp_option = temp_option.Append(optionText);     
  }
  else temp_option = optionText;
  
  CDG_active_options_text[position]  = temp_option;
  CDG_active_options_height[position]= GetTextHeight(temp_option, CDG.text_font, 
        CDG.gui_width - CDG.border_left - CDG.border_right)+CDG.text_line_space;
  CDG_active_options_width[position] = GetTextWidth(temp_option, CDG.text_font)+ CDG.border_left + CDG.border_right +2;
  if (CDG.bullet!=0) 
    CDG_active_options_width[position] += Game.SpriteWidth[CDG.bullet];
    
}



/***********************************************************************
 * PRIVATE FUNCTION
 * getOptionDetails(DialogOptionsRenderingInfo *info)
 * Get active option numbers, texts and their max height  
 * 
 ***********************************************************************/
function _getOptionDetails(this CustomDialogGui*,DialogOptionsRenderingInfo *info){
  int i = 1, j = 1, option_count;
  String temp_option, temp_string;
  
  option_count = info.DialogToRender.OptionCount;
  

  // Normal Sorting
  if (!CDG.dialog_options_upwards) {
    while (i <= option_count) {
      if (info.DialogToRender.GetOptionState(i) == eOptionOn) 
      {
        temp_string   = info.DialogToRender.GetOptionText(i);
        CDG._addOption(j, i, temp_string);
        j++;
      }
      i++;
    }       
  }
  // Bottom-Up sorting
  else {
    i = option_count;
    while (i >= 1) {
      if (info.DialogToRender.GetOptionState(i) == eOptionOn) 
      {
        temp_string   = info.DialogToRender.GetOptionText(i);
        CDG._addOption(j, i, temp_string);
        j++;
      }
      i--;
    }   
  }
  
  
}

/***********************************************************************
 * PRIVATE FUNCTION
 * _getRowCount()
 * Get the Number of Rows
 *
 * 
 ***********************************************************************/
function _getRowCount(this CustomDialogGui*, int width)
{ 
  int i, j, k = 1, temp_height; 
  bool first_call=false;
  
  j = 0;
  if ( CDG.scroll_from ==0) {
    CDG.scroll_from =1;      
    first_call = true;
  }
  i = CDG.scroll_from;
  

  temp_height =CDG.max_option_height;
  // How many options fit in the max_height?

  while (i < CDG.active_options_count)
  {        
    if (temp_height > CDG_active_options_height[i]) {
      temp_height -= CDG_active_options_height[i];
      j++;
    }
    else i = CDG.active_options_count-1;
    CDG.scroll_to = j;
    i++;
  }
  
  CDG.scroll_to += CDG.scroll_from-1; 
  if (CDG.scroll_to >= CDG.active_options_count) CDG.scroll_to = CDG.active_options_count-1;   
  
  // Reverse counting to scroll down to the last option
  if (CDG.dialog_options_upwards && first_call) { 
    i = CDG.active_options_count-1;
    j = 0;
    temp_height = CDG.max_option_height;
    while (i > 0) {
      if (temp_height > CDG_active_options_height[i]) {
        temp_height -= CDG_active_options_height[i];
        j++;
      }else i=0;        
      i--;
    }
    CDG.scroll_to = CDG.active_options_count-1;  
    
    if (j >= CDG.active_options_count-1) CDG.scroll_from = 1;
    else CDG.scroll_from = CDG.active_options_count -j;
  }
  
}


/***********************************************************************
 * PRIVATE FUNCTION
 * _repexec
 * formally dialog_options_get_active
 *
 * 
 ***********************************************************************/
function _repexec(this CustomDialogGui*, DialogOptionsRenderingInfo *info)
{
  int i=0, ypos = CDG.border_top, xpos = CDG.border_left, xpos_offset, j=1, 
  current_option;
  
  CDG_Arrow uparrow;
  CDG_Arrow downarrow;
    
  String temp_string, temp_option;
  bool linefeed_done;

  // Up-Arrow coordinates
  uparrow.x1 = info.X + CDG.uparrow_xpos;
  uparrow.y1 = info.Y + CDG.uparrow_ypos ;
  uparrow.x2 = uparrow.x1 + Game.SpriteWidth[CDG.uparrow_img];
  uparrow.y2 = uparrow.y1 + Game.SpriteHeight[CDG.uparrow_img];

  // Down-Arrow coordinates
  downarrow.x1 = info.X + CDG.downarrow_xpos;
  downarrow.y1 = info.Y + CDG.downarrow_ypos ;
  downarrow.x2 = downarrow.x1 + Game.SpriteWidth[CDG.downarrow_img];
  downarrow.y2 = downarrow.y1 + Game.SpriteHeight[CDG.downarrow_img];    
  
  // scroll up-down: highlight
  // Scroll up
  if ((mouse.x >= uparrow.x1 && mouse.y >= uparrow.y1)&&(mouse.x <= uparrow.x2 && mouse.y <= uparrow.y2)) 
  {

    if (CDG.uparrow_current_img !=CDG.uparrow_hi_img && CDG.uparrow_hi_img!=0) 
    { 
      CDG.uparrow_current_img = CDG.uparrow_hi_img;
      CDG.downarrow_current_img = CDG.downarrow_img;
#ifver 3.4
        info.Update();
#endif
      return;
    }
    
  }
  // Scroll down
  else if ((mouse.x >= downarrow.x1 && mouse.y >= downarrow.y1) && (mouse.x <= downarrow.x2 && mouse.y <= downarrow.y2)) 
  {

    if (CDG.downarrow_current_img !=CDG.downarrow_hi_img && CDG.downarrow_hi_img !=0) 
    {
      CDG.downarrow_current_img = CDG.downarrow_hi_img;
      CDG.uparrow_current_img = CDG.uparrow_img;
      #ifver 3.4
        info.Update();
      #endif      
      return;
    }
    
  }
  //Nothing
  else 
  {
    if ((CDG.downarrow_current_img !=CDG.downarrow_img ) ||(CDG.uparrow_current_img !=CDG.uparrow_img)) 
    {
      CDG.uparrow_current_img = CDG.uparrow_img;
      CDG.downarrow_current_img = CDG.downarrow_img;     
      #ifver 3.4
        info.Update();
      #endif          
      return;
    }
  }

  i = CDG.scroll_from;
  // Active option for vertical alignment
  while (i <= CDG.scroll_to) {
    
    ypos += CDG_active_options_height[i];
    if ((mouse.y - info.Y) < ypos && 
        (mouse.y > info.Y + CDG.border_top) &&
       ((mouse.x > info.X + CDG.border_left)) && 
        (mouse.x < info.X+ CDG.gui_width - CDG.border_right))
    {
      info.ActiveOptionID = CDG_active_options[i];    
      return;
    }
    else  if ((mouse.y - info.Y) < ypos || 
              (mouse.y - info.Y > info.Height - CDG.border_bottom) ||
             ((mouse.x >info.X + CDG.gui_width - CDG.border_right))||
              (mouse.x<info.X))
     {        
      info.ActiveOptionID = 0;   
    }
    i++;
  }    
}

/***********************************************************************
 * AGS SUPPLIED FUNCTION 
 * dialog_options_get_dimensions
 * 
 ***********************************************************************/
function dialog_options_get_dimensions(DialogOptionsRenderingInfo *info)
{  
  int i=1, j=1, option_count=0, max_height=0, autoheight=0, active_options=1, 
      autowidth=0, max_width = 0,  temp_width = 0,  xpos,  ypos;
  String temp_option, temp_string;
    
    // Reserve space for bullet in textmode, if needed.
    if (CDG.bullet!=0) 
      if (CDG.border_left <Game.SpriteWidth[CDG.bullet]) {
        CDG.border_left   += Game.SpriteWidth[CDG.bullet];
    }

  ////////////////////////////////////////////////////////
  // calculate autowidth and autoheight                 //
  ////////////////////////////////////////////////////////
  if (CDG.autosize_height)
    CDG.max_option_height = CDG.autosize_maxheight - CDG.border_bottom - CDG.border_top;
  else
    CDG.max_option_height = CDG.gui_height - CDG.border_bottom - CDG.border_top;  
    
  if (CDG.autosize_height || CDG.autosize_width) {
    option_count = info.DialogToRender.OptionCount;       
    
    CDG._prepare(info);
    CDG._getOptionDetails(info);
    

    while (i <= CDG.active_options_count-1) {
      max_height += CDG_active_options_height[i];
      temp_width = CDG_active_options_width[i];
      if (max_width < temp_width) max_width = temp_width;
      i++;
    }
    i=1;
    
    // check for min and max sizes
    autoheight = max_height + CDG.border_top + CDG.border_bottom +2;
    
    
    if (autoheight > CDG.autosize_maxheight) autoheight = CDG.autosize_maxheight;
    else if (autoheight <= CDG.autosize_minheight) autoheight = CDG.autosize_minheight; 
    
    autowidth = max_width + CDG.border_left+CDG.border_right +2;
    if (autowidth > CDG.autosize_maxwidth) autowidth = CDG.autosize_maxwidth;
    else if (autowidth <= CDG.autosize_minwidth) autowidth = CDG.autosize_minwidth;
  }
  
  if (!CDG.autosize_height) autoheight = CDG.gui_height;
  if (!CDG.autosize_width) autowidth = CDG.gui_width;  
  
  xpos = CDG.gui_xpos;
  ypos = CDG.gui_ypos;      

// Check on Screenborders   
  
  if ((ypos + autoheight + CDG.yscreenborder) > System.ViewportHeight) {
    ypos = System.ViewportHeight - autoheight - CDG.yscreenborder;  
  }
  else if (ypos < CDG.yscreenborder) ypos =  CDG.yscreenborder;
    
  if ((xpos + autowidth + CDG.xscreenborder) > System.ViewportWidth) {
    xpos = System.ViewportWidth - autowidth - CDG.xscreenborder;      
  }
  else if (xpos < CDG.xscreenborder) xpos = CDG.xscreenborder;
      
  ////////////////////////////////////////////////////////
  // Set GUI sizes                                      //
  ////////////////////////////////////////////////////////      
  
  if (CDG.autosize_height) {  
    CDG.gui_height = autoheight;    
    
    if ((autoheight + ypos + CDG.yscreenborder) > System.ViewportHeight) {
      //CDG.bg_color=1;
      CDG.gui_height = System.ViewportHeight - ypos - CDG.yscreenborder;
    }
              
    else if ((CDG.gui_height + ypos + CDG.yscreenborder) > System.ViewportHeight) {
      //CDG.bg_color=1;
      CDG.gui_height = System.ViewportHeight - ypos - CDG.yscreenborder;
    }     
  }      

  if (CDG.autosize_width) {
    CDG.gui_width = autowidth;
    if (autowidth + xpos + CDG.xscreenborder > System.ViewportWidth) {
      CDG.gui_width = System.ViewportWidth- xpos - CDG.xscreenborder;  
    }        
    else if (CDG.gui_width + xpos + CDG.xscreenborder > System.ViewportWidth) {  
      CDG.gui_width = System.ViewportWidth- xpos - CDG.xscreenborder;  
    } 
  }  
    
  ////////////////////////////////////////////////////////
  // Arrow alignment                                    //
  ////////////////////////////////////////////////////////
  if (CDG.auto_arrow_align >0) {
   CDG.uparrow_ypos   = CDG.auto_arrow_up_offset_y;
   CDG.downarrow_ypos = CDG.gui_height - Game.SpriteHeight[CDG.downarrow_img] - CDG.auto_arrow_down_offset_y;  

      if (CDG.auto_arrow_align == 1) {
        CDG.uparrow_xpos   = CDG.border_left+ CDG.auto_arrow_up_offset_x;
        CDG.downarrow_xpos = CDG.border_left+ CDG.auto_arrow_down_offset_x;
      }
      else if (CDG.auto_arrow_align == 2) {
        CDG.uparrow_xpos   = CDG.gui_width / 2 - Game.SpriteWidth[CDG.downarrow_img] / 2;
        CDG.downarrow_xpos = CDG.uparrow_xpos;
      }      
      else if (CDG.auto_arrow_align ==3) {
        CDG.uparrow_xpos   = CDG.gui_width - Game.SpriteWidth[CDG.uparrow_img] - CDG.auto_arrow_up_offset_x; 
        CDG.downarrow_xpos = CDG.gui_width - Game.SpriteWidth[CDG.downarrow_img] - CDG.auto_arrow_down_offset_x; 
      }   
  }

  
  //Position of GUI
  info.X = xpos ;
  info.Y = ypos ;  
  //Size of GUI
  info.Width  = CDG.gui_width ;
  info.Height = CDG.gui_height;  
  
  //if (CDG.scroll_from == 0)CDG.scroll_from = 1;
}



/***********************************************************************
 * AGS SUPPLIED FUNCTION 
 * dialog_options_render
 * 
 ***********************************************************************/
function dialog_options_render(DialogOptionsRenderingInfo *info)
{

  int i = 1, j = 1, k = 1, ypos = CDG.border_top, ypos_offset, xpos = CDG.border_left, xpos_offset, current_height, 
      option_count=0, current_option, temp_height, temp_text_height;
  String temp_option;
  bool linefeed_done;
   
  option_count = info.DialogToRender.OptionCount;
  
  ////////////////////////////////////////////////////////
  // Draw GUI decorations                               //
  ////////////////////////////////////////////////////////
  CDG.dialog_window = info;
 
  // Fill GUI Background
  if (CDG.bg_img==0) info.Surface.Clear(CDG.bg_color);
  else 
  {
   if (CDG.bg_img_scaling==1) {
      if (CDG.bg_img_transparency == -1) info.Surface.DrawImage(0, 0, CDG.bg_img, 0, info.Width, info.Height);
      else info.Surface.DrawImage(0, 0, CDG.bg_img, CDG.bg_img_transparency, info.Width, info.Height);        
    }
    else {
      if (CDG.bg_img_transparency == -1) info.Surface.DrawImage(0, 0, CDG.bg_img);
      else info.Surface.DrawImage(0, 0, CDG.bg_img, CDG.bg_img_transparency);
    }
  }
 
  // Outline
  if (CDG.border_visible) {
    info.Surface.DrawingColor = CDG.border_color;
    info.Surface.DrawLine(0, 0, info.Width, 0);
    info.Surface.DrawLine(0, 0, 0, info.Height);
    if (System.ViewportWidth>320) {
      info.Surface.DrawLine(0, info.Height, info.Width, info.Height);
      info.Surface.DrawLine(info.Width, 0, info.Width, info.Height);   
    }
    else {
      info.Surface.DrawLine(0, info.Height-1, info.Width, info.Height-1);
      info.Surface.DrawLine(info.Width-1, 0, info.Width-1, info.Height);  
    }
  }
  CDG._prepare(info);
  CDG._getOptionDetails(info);

  ////////////////////////////////////////////////////////
  // Calculate, how many options fit in the GUI         //
  ////////////////////////////////////////////////////////
  CDG._getRowCount(CDG.gui_width);
  
  ////////////////////////////////////////////////////////
  // Finally draw the options                           //
  ////////////////////////////////////////////////////////
  i = CDG.scroll_from;
  

  while (i <= CDG.scroll_to)
  { 
    current_option = CDG_active_options[i];
    
    if (info.DialogToRender.GetOptionState(current_option) == eOptionOn)
    {             
      if (info.ActiveOptionID == current_option) info.Surface.DrawingColor = CDG.text_color_active;
      else info.Surface.DrawingColor = CDG.text_color;
      
      if (CDG.text_bg!=0) {
          if (CDG.text_bg_scaling==1)
            info.Surface.DrawImage(CDG.text_bg_xpos, ypos, CDG.text_bg, CDG.text_bg_transparency, 
            CDG.gui_width - CDG.text_bg_xpos - CDG.border_left , CDG_active_options_height[i]);
          else info.Surface.DrawImage(CDG.text_bg_xpos, ypos, CDG.text_bg, CDG.text_bg_transparency);
      }
      
      if (CDG.bullet!=0) info.Surface.DrawImage (CDG.border_left - Game.SpriteWidth[CDG.bullet], ypos, CDG.bullet);

      info.Surface.DrawStringWrapped(CDG.border_left, ypos, CDG.gui_width - CDG.border_left-CDG.border_right, 
                         CDG.text_font, CDG.text_alignment, CDG_active_options_text[i]);
      
      ypos += CDG_active_options_height[i];
    } 
    
    i++;
  }


 
  // Remove pushed state, if the mouse has left the buttons
  CDG_Arrow uparrow;
  CDG_Arrow downarrow;

  // Up-Arrow coordinates
  uparrow.x1 = info.X + CDG.uparrow_xpos;
  uparrow.y1 = info.Y + CDG.uparrow_ypos ;
  uparrow.x2 = uparrow.x1 + Game.SpriteWidth[CDG.uparrow_img];
  uparrow.y2 = uparrow.y1 + Game.SpriteHeight[CDG.uparrow_img];

  // Down-Arrow coordinates
  downarrow.x1 = info.X + CDG.downarrow_xpos;
  downarrow.y1 = info.Y + CDG.downarrow_ypos ;
  downarrow.x2 = downarrow.x1 + Game.SpriteWidth[CDG.downarrow_img];
  downarrow.y2 = downarrow.y1 + Game.SpriteHeight[CDG.downarrow_img];   
  
  if (!((mouse.x >= uparrow.x1 && mouse.y >= uparrow.y1)&&(mouse.x <= uparrow.x2 && mouse.y <= uparrow.y2)) &&
      !((mouse.x >= downarrow.x1 && mouse.y >= downarrow.y1) && (mouse.x <= downarrow.x2 && mouse.y <= downarrow.y2))){
        CDG.uparrow_current_img = CDG.uparrow_img;
        CDG.downarrow_current_img = CDG.downarrow_img;
      }
   
  
  // Draw scrolling sprites
  if (CDG.scroll_from!=1 ){ 
    info.Surface.DrawImage(CDG.uparrow_xpos, CDG.uparrow_ypos,  CDG.uparrow_current_img);
  }

  if (CDG.scroll_to != CDG.active_options_count-1 ) 
    info.Surface.DrawImage(CDG.downarrow_xpos, CDG.downarrow_ypos,  CDG.downarrow_current_img);    
}


/***********************************************************************
 * AGS SUPPLIED FUNCTION in 3.2 and 3.3
 * dialog_options_get_active
 * Highlight the textoptions on mouseover
 *
 ***********************************************************************/
#ifnver 3.4
function dialog_options_get_active(DialogOptionsRenderingInfo *info)
{
  CDG._repexec(info);
}
#endif
/***********************************************************************
 * AGS SUPPLIED FUNCTION in 3.4
 * dialog_options_repexec
 * repexec for custom dialog rendering
 *
 ***********************************************************************/
#ifver 3.4
function dialog_options_repexec(DialogOptionsRenderingInfo *info)
{
  CDG._repexec(info);
}
#endif

/***********************************************************************
 * AGS SUPPLIED FUNCTION
 * dialog_options_mouse_click
 * 
 ***********************************************************************/
function dialog_options_mouse_click(DialogOptionsRenderingInfo *info, MouseButton button)
{

  CDG_Arrow uparrow;
  CDG_Arrow downarrow;
  int i;

  // Up-Arrow coordinates
  uparrow.x1 = info.X + CDG.uparrow_xpos;
  uparrow.y1 = info.Y + CDG.uparrow_ypos ;
  uparrow.x2 = uparrow.x1 + Game.SpriteWidth[CDG.uparrow_img];
  uparrow.y2 = uparrow.y1 + Game.SpriteHeight[CDG.uparrow_img];

  // Down-Arrow coordinates
  downarrow.x1 = info.X + CDG.downarrow_xpos;
  downarrow.y1 = info.Y + CDG.downarrow_ypos ;
  downarrow.x2 = downarrow.x1 + Game.SpriteWidth[CDG.downarrow_img];
  downarrow.y2 = downarrow.y1 + Game.SpriteHeight[CDG.downarrow_img];
  

  // scroll up
  if (((mouse.x >= uparrow.x1 && mouse.y >= uparrow.y1) &&
       (mouse.x <= uparrow.x2 && mouse.y <= uparrow.y2))||
       (button == eMouseWheelNorth && CDG.mousewheel)) {
        i=0;
        
        while (i<CDG.scroll_rows)
        {
          if (CDG.scroll_from >1) CDG.scroll_from --;
          dialog_options_render(info);          
          i++;
        }
  } 
  // scroll down
  else if (((mouse.x >= downarrow.x1 && mouse.y >= downarrow.y1) &&
            (mouse.x <= downarrow.x2 && mouse.y <= downarrow.y2)) ||
            (button == eMouseWheelSouth && CDG.mousewheel)) {
      
      i=0; 
      while (i<CDG.scroll_rows)
      {      
        if (CDG.scroll_to != CDG.active_options_count-1) {
          dialog_options_render(info); 
          CDG.scroll_from ++;
        }
        i++;
      }
  }
  #ifnver 3.4
  dialog_options_get_active(info);  
  #endif
  #ifver 3.4
  info.Update();
  if (button != eMouseWheelSouth && button != eMouseWheelNorth) info.RunActiveOption();
  #endif
}

function game_start() 
{
   CDG.uparrow_current_img = CDG.uparrow_img;
   CDG.downarrow_current_img = CDG.downarrow_img;   
   CDG.init();
}



function repeatedly_execute() 
{
  if (CDG.reset_scrollstate) { 
    if (CDG.dialog_options_upwards) CDG.scroll_from =0;
    else CDG.scroll_from = 1;
  }
  if (in_speech == true) {
    in_speech = false;
    if (CDG.hide_gui_while_dialog == true && gMaingui.Visible == false && gAction.Visible == false) {
      gMaingui.Visible = true;
      gAction.Visible = true;
    }
  }
}

export CDG;