
ButtonState bState[4]; //0=unused, 1=left, 2=right, 3=middle
export bState; 
MouseState mState;
export mState;

struct ControlStruct {
  GUIControl* c;
  String desc; //description (useful for the hovering feature)
};

ControlStruct controls[MAX_STANDALONE_BUTTONS];
int nbStandaloneControls;

/*
enum MouseButton {
  eMouseLeft,         1
  eMouseRight,        2
  eMouseMiddle,       3
  eMouseLeftInv,      value not allowed in mouse.IsMouseDown
  eMouseMiddleInv,    value not allowed in mouse.IsMouseDown
  eMouseRightInv,     value not allowed in mouse.IsMouseDown
  eMouseWheelNorth,   value not allowed in mouse.IsMouseDown
  eMouseWheelSouth    value not allowed in mouse.IsMouseDown
};
*/
#define BUILTIN_MOUSE_BUTTONS 3 

struct MouseInfo {
  GUIControl* controlHeldLastCycle; //which mouse button was held over which control during last cycle
  bool mouseWasDownDuringLastCycle; //if a mouse button was held above anything during the last cycle

  GUIControl* controlClick; //this contains all the controls that just got clicked (one for each mouse button)
  bool genericClick; //this tells if there was a click, no matter on what, even on nothing (one for each mouse button)
  
};

MouseInfo mouseI[BUILTIN_MOUSE_BUTTONS];
/*
GUIControl* controlHeldDuringLastGameCycle[BUILTIN_MOUSE_BUTTONS]; //which mouse button was held over which control during last cycle
bool mouseWasDownDuringLastCycle[BUILTIN_MOUSE_BUTTONS]; //if a mouse button was held above anything during the last cycle

GUIControl* clicks[BUILTIN_MOUSE_BUTTONS]; //this contains all the controls that just got clicked (one for each mouse button)
bool genericClick[BUILTIN_MOUSE_BUTTONS]; //this tells if there was a click, no matter on what, even on nothing (one for each mouse button)
*/

GUIControl* hovered; //this contains the control currently being hovered



static void StandaloneClick::RegisterControl(GUIControl* c,  String description)
{
  if (description == null)
    description = "";
    
  controls[nbStandaloneControls].c = c;
  controls[nbStandaloneControls].desc = description;
  
  nbStandaloneControls++;
}
  
function Clear_HeldControl() {
    int m=eMouseLeft; //1
    while (m<=eMouseMiddle) {
      mouseI[m-1].controlHeldLastCycle=null;
      //mouseI[m-1].mouseWasDownDuringLastCycle=false;
      m++;
    }
}

// iterates on all the standalone controls and finds the index in the 'controls' array 
// of the one given in parameterr
int FindControlID(GUIControl* c)
{
    int i=0;
    while (i<nbStandaloneControls) {
      if (c==controls[i].c)
        return i;
      i++;
    } 
    return -1;
}

function ResetClick() {
    int m=eMouseLeft; //1
    while (m<=eMouseMiddle) {//3
      mouseI[m-1].controlClick=null;
      mouseI[m-1].genericClick=false; 
      m++;
    }
}

 //call this to know what button just got clicked
 //WARNING: it consumes the click by default!
static GUIControl* StandaloneClick::GetClick(MouseButton m,  bool consumeClick)
{
  GUIControl* c = mouseI[m-1].controlClick;
  if (consumeClick) {
    mouseI[m-1].controlClick=null;
    mouseI[m-1].genericClick=false; 
  }
  return c;
}

static GUIControl* StandaloneClick::GetHovered()
{
  return hovered;
}

static String StandaloneClick::GetHoveredText()
{
  int id = FindControlID(hovered);
  if (id>=0)
    return controls[id].desc;
  return ""; //safety
}

void OtherProcessing() 
{
    ResetClick();
  

    //GUIControl* c = at_xy;
    /*
    int i=0;
    GUIControl* c = null;
    while (i<nbStandaloneControls) //find above which of our controls is the mouse
    {
      if (at_xy==controls[i].c) {
        c = at_xy;
        i=nbStandaloneControls; //exit loop
      }
      i++;
    }
    */
    
    /*
    if (c==null) //the mouse is not over one of our registered buttons
    {
      Clear_HeldControl();
      hovered=null;
    }
    else //the mouse is over one of our registered controls
    {*/
    
    GUIControl* c= GUIControl.GetAtScreenXY(mouse.x,  mouse.y);
    hovered = c;
    
    //// NOW WE PROCESS THE CLICKING ////
    
    int m=eMouseLeft; //1
    while (m<=eMouseMiddle) {//3
      if (mouse.IsButtonDown(m)) {
        
          if (c!=null) //the mouse is over something
          {
                if (mouseI[m-1].controlHeldLastCycle!=null)  //A button was being held over a control
                  if (mouseI[m-1].controlHeldLastCycle!=c) { //...but it was a different one
                    mouseI[m-1].controlHeldLastCycle=null; //we cancel the click and will wait for a "real" one (starts and ends in the same control)
                    mouseI[m-1].mouseWasDownDuringLastCycle = false;
                  } else { //we keep holding the same button over the same control.
                    //do nothing
                  }
                else { //We didn't hold anything in the last cycle...
                  mouseI[m-1].controlHeldLastCycle=c; //...now we do!
                  mouseI[m-1].mouseWasDownDuringLastCycle = true;
                }
              } else { //c==null
                if (mouseI[m-1].mouseWasDownDuringLastCycle ) { //A button was being held
                    //we keep holding. Do nothing
                } else { //We didn't hold anything in the last cycle...
                  mouseI[m-1].mouseWasDownDuringLastCycle = true;
                  //Display("generic down"); //DEBUG
                }              
          }
          
          
      } else { //the mouse button is NOT being pressed
      
      
        if (c!=null) {//the mouse is over a control

              if (mouseI[m-1].controlHeldLastCycle!=null) { //We just released that mouse button from a control
                //Display(String.Format("click on %s", controls[FindControlID(c)].desc));
                //Display("click click");

                mouseI[m-1].controlClick = c; //we store the click
                mouseI[m-1].genericClick = true;
                
                //we reset the utility variables
                mouseI[m-1].controlHeldLastCycle=null;
                mouseI[m-1].mouseWasDownDuringLastCycle = false;
              } else { //no specific control was held...but was the mouse pressed?
                  if (mouseI[m-1].mouseWasDownDuringLastCycle ) { //A mouse button was being held
                      //it's weird because we started pressing the mouse over a control and released over nothing.
                      //We store a 'generic' click anyway, but we could choose
                      //to consider that click not valid.
                      mouseI[m-1].genericClick= true;
                      //Display("generic click"); //DEBUG
                      
                      //reset utility variables
                      mouseI[m-1].controlHeldLastCycle=null;
                      mouseI[m-1].mouseWasDownDuringLastCycle = false;


                  } else { //We didn't hold anything in the last cycle... and we still don't
                      //do nothing
                      mouseI[m-1].controlHeldLastCycle=null; //safety
                      mouseI[m-1].mouseWasDownDuringLastCycle = false; //safety
                  }  
              }
              
        } else { // c==null -- the mouse is not over a control
        
               //Display("generic up"); //DEBUG
               if (mouseI[m-1].mouseWasDownDuringLastCycle ) { //A mouse button was being held
                  //we just released. That's a click!
                  mouseI[m-1].genericClick= true;
                  //Display("generic click2"); //DEBUG
                  
                  //Reset utility variables
                  mouseI[m-1].controlHeldLastCycle=null; //safety
                  mouseI[m-1].mouseWasDownDuringLastCycle = false;
                  
              } else { //We didn't hold anything in the last cycle... and we still don't
                  //do nothing
                  mouseI[m-1].controlHeldLastCycle=null; //safety
                  mouseI[m-1].mouseWasDownDuringLastCycle = false; //safety
              }              
        } //if (c!=null) 
        
      }//if (mouse.IsButtonDown(m))
      
      m++;
    }
    
    /*}*/
  //} //if (c!=null) 
  
    //else //the mouse is not over a control (any control)
    if (hovered==null) //the mouse is not over a control (any control)
    {
        Clear_HeldControl();
        hovered=null;
    }
  
  
}

static bool StandaloneClick::ClickDetected(MouseButton m)
{
  return mouseI[m-1].genericClick;
}
  
  
  
  
void UpdateMouseState()
{
    mState.offsetSinceLastCycle_x = mouse.x - mState.mousex_lastCycle;
    mState.offsetSinceLastCycle_y = mouse.y - mState.mousey_lastCycle;

    mState.mousex_lastCycle = mouse.x;
    mState.mousey_lastCycle = mouse.y;
    
    
    
    int m=eMouseLeft; //1
    while (m<=eMouseMiddle) { //3
    
      bState[m].click = false;
      
      bState[m].lastCycle = bState[m].thisCycle;
      bState[m].thisCycle = mouse.IsButtonDown(m);

      if (bState[m].thisCycle) { //the button is being pressed...
        if (bState[m].lastCycle) { //...and was already being pressed last cycle. We continue dragging
          //bState[m].cDrop =  ;      //unchanged
          //bState[m].endDrag_x =  ;  //unchanged
          //bState[m].endDrag_y =  ;  //unchanged
          
          //bState[m].cDrag = ;       //unchanged (until next cycle)
          //bState[m].startDrag_x = ; //unchanged
          //bState[m].startDrag_y = ; //unchanged
        } else { //...but was not pressed in the last cycle. It means we start dragging or clicking
          bState[m].cDrag = GUIControl.GetAtScreenXY(mouse.x,  mouse.y);
          bState[m].startDrag_x = mouse.x;
          bState[m].startDrag_y = mouse.y;
          
          bState[m].cDrop = null;   //Reset
          bState[m].endDrag_x = -1; //Reset
          bState[m].endDrag_y = -1; //Reset          
        }
      } else { //the mouse button is not pressed...
        if (bState[m].lastCycle) { ///...yet it was being pressed last cycle
          bState[m].click = true;
          
          bState[m].cDrop = GUIControl.GetAtScreenXY(mouse.x,  mouse.y);     
          bState[m].endDrag_x = mouse.x; 
          bState[m].endDrag_y = mouse.y; 
          
          //bState[m].cDrag = ;       //unchanged (until next cycle)
          //bState[m].startDrag_x = ; //unchanged
          //bState[m].startDrag_y = ; //unchanged
          
        } else { //...and it was already not pressed last cycle
          bState[m].cDrop = null;   //Reset
          bState[m].endDrag_x = -1; //Reset
          bState[m].endDrag_y = -1; //Reset
          
          bState[m].cDrag = null;     //Reset
          bState[m].startDrag_x = -1; //Reset
          bState[m].startDrag_y = -1; //Reset
        }
      }
      m++;
    }
}

void repeatedly_execute_always()
{
  OtherProcessing();
  UpdateMouseState();
}
