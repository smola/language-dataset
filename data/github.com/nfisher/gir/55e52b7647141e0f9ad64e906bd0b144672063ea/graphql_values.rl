// Code generated by ragel DO NOT EDIT.
package gir

%%{
  machine graphql_values;

  include graphql_common "graphql_common.rl";

main := |*
					Variable      => { em.Emit(ts, te, Variable, data); };
					IntValue      => { em.Emit(ts, te, IntValue, data); };
					FloatValue    => { em.Emit(ts, te, FloatValue, data); };
					StringValue   => { em.Emit(ts, te, StringValue, data); };
					BooleanValue  => { em.Emit(ts, te, BooleanValue, data); };
					NullValue     => { em.Emit(ts, te, NullValue, data); };
					EnumValue     => { em.Emit(ts, te, EnumValue, data); };
					Ignored       => { /* Ignore */ };
				*|;
}%%

%% write data nofinal;

func ParseValues(data []byte, em Emitter) {
  var stack []int
  var token Token
  cs, p, pe, eof := 0, 0, len(data), len(data)
  ts, te, act, top := 0, 0, 0, 0
  _ = eof
  _ = act
  _ = token
  _ = top
  _ = stack

  %% write init;

  %% write exec;
}
