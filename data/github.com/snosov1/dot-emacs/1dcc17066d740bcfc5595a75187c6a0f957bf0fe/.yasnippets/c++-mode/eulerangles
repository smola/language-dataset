# -*- mode: snippet -*-
# name: convert between Euler angles and 3x3 rotation matrix
# key: eulerangles
# --
/** this conversion uses NASA standard aeroplane conventions as described on page:
 *   http://www.euclideanspace.com/maths/geometry/rotations/euler/index.htm
 *   Coordinate System: right hand
 *   Positive angle: right hand
 *   Order of euler angles: heading first, then attitude, then bank
 *   matrix row column ordering:
 *   [m00 m01 m02]
 *   [m10 m11 m12]
 *   [m20 m21 m22]*/
cv::Matx33f euler2mat(const cv::Vec3f &euler)
{
    double heading = euler[0];
    double attitude = euler[1];
    double bank = euler[2];

    // Assuming the angles are in radians.
    double ch = cos(heading);
    double sh = sin(heading);
    double ca = cos(attitude);
    double sa = sin(attitude);
    double cb = cos(bank);
    double sb = sin(bank);

    double m00 = ch * ca;
    double m01 = sh*sb - ch*sa*cb;
    double m02 = ch*sa*sb + sh*cb;
    double m10 = sa;
    double m11 = ca*cb;
    double m12 = -ca*sb;
    double m20 = -sh*ca;
    double m21 = sh*sa*cb + ch*sb;
    double m22 = -sh*sa*sb + ch*cb;

    return cv::Matx33f(m00, m01, m02,
                       m10, m11, m12,
                       m20, m21, m22);
}

/** this conversion uses conventions as described on page:
 *   http://www.euclideanspace.com/maths/geometry/rotations/euler/index.htm
 *   Coordinate System: right hand
 *   Positive angle: right hand
 *   Order of euler angles: heading first, then attitude, then bank
 *   matrix row column ordering:
 *   [m00 m01 m02]
 *   [m10 m11 m12]
 *   [m20 m21 m22]*/
cv::Vec3f mat2euler(const cv::Matx33f &m) {
    // Assuming the angles are in radians.
	if (m(1,0) > 0.998) { // singularity at north pole
		double heading = atan2(m(0,2), m(2,2));
		double attitude = M_PI/2;
		double bank = 0;
		return cv::Vec3f(heading, attitude, bank);
	}
	if (m(1,0) < -0.998) { // singularity at south pole
		double heading = atan2(m(0,2), m(2,2));
		double attitude = -M_PI/2;
		double bank = 0;
		return cv::Vec3f(heading, attitude, bank);
	}

	double heading  = atan2(-m(2,0), m(0,0));
	double attitude = asin ( m(1,0));
	double bank     = atan2(-m(1,2), m(1,1));

    return cv::Vec3f(heading, attitude, bank);
}